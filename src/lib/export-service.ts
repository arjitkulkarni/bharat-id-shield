// Export service for downloading credentials in various formats
import { useTranslations } from "./i18n"

export interface Credential {
  title: string
  issuer: string
  type: string
  status: "verified" | "pending" | "expired"
  issueDate: string
  expiryDate?: string
  credentialId: string
}

export type ExportFormat = 'json' | 'pdf' | 'csv' | 'xml'

export class ExportService {
  private static downloadFile(content: string, filename: string, mimeType: string) {
    const blob = new Blob([content], { type: mimeType })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = filename
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  static exportAsJSON(credentials: Credential[], filename?: string) {
    const exportData = {
      exportDate: new Date().toISOString(),
      totalCredentials: credentials.length,
      credentials: credentials.map(cred => ({
        ...cred,
        exportedAt: new Date().toISOString()
      }))
    }

    const content = JSON.stringify(exportData, null, 2)
    const fileName = filename || `bharat-id-credentials-${new Date().toISOString().split('T')[0]}.json`
    
    this.downloadFile(content, fileName, 'application/json')
  }

  static exportAsCSV(credentials: Credential[], filename?: string) {
    const headers = ['Title', 'Issuer', 'Type', 'Status', 'Issue Date', 'Expiry Date', 'Credential ID']
    const csvContent = [
      headers.join(','),
      ...credentials.map(cred => [
        `"${cred.title}"`,
        `"${cred.issuer}"`,
        `"${cred.type}"`,
        `"${cred.status}"`,
        `"${cred.issueDate}"`,
        `"${cred.expiryDate || 'N/A'}"`,
        `"${cred.credentialId}"`
      ].join(','))
    ].join('\n')

    const fileName = filename || `bharat-id-credentials-${new Date().toISOString().split('T')[0]}.csv`
    this.downloadFile(csvContent, fileName, 'text/csv')
  }

  static exportAsXML(credentials: Credential[], filename?: string) {
    const xmlContent = `<?xml version="1.0" encoding="UTF-8"?>
<credentials exportDate="${new Date().toISOString()}" totalCount="${credentials.length}">
${credentials.map(cred => `  <credential>
    <title>${this.escapeXml(cred.title)}</title>
    <issuer>${this.escapeXml(cred.issuer)}</issuer>
    <type>${this.escapeXml(cred.type)}</type>
    <status>${cred.status}</status>
    <issueDate>${cred.issueDate}</issueDate>
    <expiryDate>${cred.expiryDate || ''}</expiryDate>
    <credentialId>${cred.credentialId}</credentialId>
  </credential>`).join('\n')}
</credentials>`

    const fileName = filename || `bharat-id-credentials-${new Date().toISOString().split('T')[0]}.xml`
    this.downloadFile(xmlContent, fileName, 'application/xml')
  }

  static async exportAsPDF(credentials: Credential[], filename?: string) {
    // Simple PDF generation using HTML to PDF conversion
    const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Bharat-ID Shield - Credential Export</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .credential { border: 1px solid #ddd; margin: 15px 0; padding: 15px; border-radius: 5px; }
        .credential-title { font-size: 18px; font-weight: bold; color: #2563eb; }
        .credential-meta { margin: 5px 0; color: #666; }
        .status { padding: 2px 8px; border-radius: 12px; font-size: 12px; }
        .status.verified { background: #dcfce7; color: #166534; }
        .status.pending { background: #fef3c7; color: #92400e; }
        .status.expired { background: #fee2e2; color: #dc2626; }
        .footer { margin-top: 30px; text-align: center; color: #666; font-size: 12px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>ðŸ‡®ðŸ‡³ Bharat-ID Shield</h1>
        <h2>Digital Identity Credentials Export</h2>
        <p>Export Date: ${new Date().toLocaleDateString()}</p>
        <p>Total Credentials: ${credentials.length}</p>
    </div>
    
    ${credentials.map(cred => `
    <div class="credential">
        <div class="credential-title">${this.escapeHtml(cred.title)}</div>
        <div class="credential-meta">Issued by: ${this.escapeHtml(cred.issuer)}</div>
        <div class="credential-meta">Type: ${this.escapeHtml(cred.type)} | Status: <span class="status ${cred.status}">${cred.status.toUpperCase()}</span></div>
        <div class="credential-meta">Issue Date: ${cred.issueDate}${cred.expiryDate ? ` | Expiry: ${cred.expiryDate}` : ''}</div>
        <div class="credential-meta">ID: ${cred.credentialId}</div>
    </div>
    `).join('')}
    
    <div class="footer">
        <p>This document was generated by Bharat-ID Shield - Decentralized Digital Identity Platform</p>
        <p>ðŸ”’ All credentials are cryptographically secured and verifiable on the blockchain</p>
    </div>
</body>
</html>`

    // Create a new window for printing
    const printWindow = window.open('', '_blank')
    if (printWindow) {
      printWindow.document.write(htmlContent)
      printWindow.document.close()
      
      // Wait for content to load then trigger print
      setTimeout(() => {
        printWindow.print()
        printWindow.close()
      }, 500)
    }
  }

  private static escapeXml(unsafe: string): string {
    return unsafe.replace(/[<>&'"]/g, (c) => {
      switch (c) {
        case '<': return '&lt;'
        case '>': return '&gt;'
        case '&': return '&amp;'
        case "'": return '&apos;'
        case '"': return '&quot;'
        default: return c
      }
    })
  }

  private static escapeHtml(unsafe: string): string {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;")
  }

  static exportCredentials(credentials: Credential[], format: ExportFormat, filename?: string) {
    switch (format) {
      case 'json':
        this.exportAsJSON(credentials, filename)
        break
      case 'csv':
        this.exportAsCSV(credentials, filename)
        break
      case 'xml':
        this.exportAsXML(credentials, filename)
        break
      case 'pdf':
        this.exportAsPDF(credentials, filename)
        break
      default:
        throw new Error(`Unsupported export format: ${format}`)
    }
  }

  static getExportFormats(): { value: ExportFormat; label: string; description: string }[] {
    return [
      {
        value: 'json',
        label: 'JSON',
        description: 'Machine-readable format with full metadata'
      },
      {
        value: 'csv',
        label: 'CSV',
        description: 'Spreadsheet format for data analysis'
      },
      {
        value: 'pdf',
        label: 'PDF',
        description: 'Printable document format'
      },
      {
        value: 'xml',
        label: 'XML',
        description: 'Structured markup format'
      }
    ]
  }
}
